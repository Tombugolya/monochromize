{"version":3,"sources":["contexts/DataContext.tsx","utils/StringUtils.ts","components/Form/FormLabel.tsx","utils/FetchUtils.ts","components/Form/FormGroup.tsx","components/Title.tsx","components/Gallery/Gallery.tsx","components/Monochromize.tsx","tests/reportWebVitals.ts","index.tsx"],"names":["DataContext","createContext","DataContextProvider","children","useState","imageSource","albumName","artistName","albumDescription","data","setData","Provider","value","setImageSource","val","setAlbumName","setArtistName","setAlbumDescription","StringUtils","s","charAt","toUpperCase","slice","FormLabel","name","Form","Group","Label","SU","capitalize","Control","required","type","placeholder","Feedback","FetchUtils","Object","keys","length","fetch","this","lambdaUrl","method","body","JSON","stringify","response","console","log","json","FormGroup","fields","validated","setValidated","handleSubmit","event","a","form","currentTarget","preventDefault","checkValidity","formData","FormData","invokeLambda","Array","from","entries","array","id","noValidate","onSubmit","map","index","Button","variant","Title","className","Gallery","Carousel","controls","Item","src","alt","Monochromize","useContext","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","StrictMode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4c193fe3.chunk.js","sourcesContent":["import { createContext, FC, ReactNode, useState } from 'react';\n\ntype TDataContextProvider = FC<{ children: ReactNode }>;\ninterface DataState {\n  imageSource: string;\n  albumName: string;\n  artistName: string;\n  albumDescription: string;\n}\ninterface TDataContext {\n  data: DataState;\n  setImageSource: (val: string) => void;\n  setAlbumName: (val: string) => void;\n  setArtistName: (val: string) => void;\n  setAlbumDescription: (val: string) => void;\n}\n\nexport const DataContext = createContext<TDataContext>(null);\n\nexport const DataContextProvider: TDataContextProvider = ({ children }) => {\n  const [data, setData] = useState<DataState>({\n    imageSource:\n      'https://lunawood.com/wp-content/uploads/2018/02/placeholder-image.png',\n    albumName: '',\n    artistName: '',\n    albumDescription: '',\n  });\n  const setImageSource = (val: string) => {\n    setData({ ...data, imageSource: val });\n  };\n  const setAlbumName = (val: string) => {\n    setData({ ...data, albumName: val });\n  };\n  const setArtistName = (val: string) => {\n    setData({ ...data, artistName: val });\n  };\n  const setAlbumDescription = (val: string) => {\n    setData({ ...data, albumDescription: val });\n  };\n  return (\n    <DataContext.Provider\n      value={{\n        data,\n        setImageSource,\n        setAlbumName,\n        setArtistName,\n        setAlbumDescription,\n      }}\n    >\n      {children}\n    </DataContext.Provider>\n  );\n};\n\nexport default DataContextProvider;\n","export default class StringUtils {\n  static capitalize(s: string): string {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n}\n","import SU from '../../utils/StringUtils';\nimport { Form } from 'react-bootstrap';\nimport { FC } from 'react';\n\ntype TFormLabel = FC<{\n  key: number;\n  name: string;\n}>;\n\nexport const FormLabel: TFormLabel = ({ name }) => {\n  return (\n    <Form.Group>\n      <Form.Label>{SU.capitalize(name)}</Form.Label>\n      <Form.Control\n        required\n        name={name}\n        type=\"text\"\n        placeholder={`Enter ${SU.capitalize(name)}`}\n      />\n      <Form.Control.Feedback type=\"invalid\">\n        Please provide an {name} name\n      </Form.Control.Feedback>\n    </Form.Group>\n  );\n};\n\nexport default FormLabel;\n","export default class FetchUtils {\n  private static lambdaUrl =\n    'https://y22tcg9j99.execute-api.us-east-1.amazonaws.com/beta';\n\n  static async invokeLambda(data: Object) {\n    if (!Object.keys(data).length) return;\n    let response;\n    try {\n      response = await fetch(this.lambdaUrl, {\n        method: 'POST',\n        body: JSON.stringify(data),\n      });\n    } catch (e) {\n      console.log(e);\n    }\n    return response ? response.json() : null;\n  }\n}\n","import { FC, FormEvent, useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport FormLabel from './FormLabel';\nimport FetchUtils from '../../utils/FetchUtils';\n\ntype TFormGroup = FC<{ fields: string[] }>;\n\nexport const FormGroup: TFormGroup = ({ fields }) => {\n  const [validated, setValidated] = useState(false);\n\n  const handleSubmit = async (event: FormEvent<HTMLFormElement>) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity()) {\n      const formData = new FormData(form);\n      const data = await FetchUtils.invokeLambda(\n        Array.from(formData.entries(), (array) => array[1])\n      );\n      console.log(data);\n    }\n    setValidated(true);\n  };\n\n  return (\n    <div id=\"form\">\n      <Form noValidate validated={validated} onSubmit={handleSubmit}>\n        {fields.map((val: string, index) => (\n          <FormLabel name={val} key={index} />\n        ))}\n        <Button type=\"submit\" variant=\"dark\">\n          Monochromize\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default FormGroup;\n","import { FC } from 'react';\n\nconst Title: FC = () => {\n  return (\n    <h1>\n      <span className=\"black\">_Monochro</span>\n      <span className=\"white\">mize</span>\n    </h1>\n  );\n};\n\nexport default Title;\n","import React, { FC } from 'react';\nimport { Carousel } from 'react-bootstrap';\n\ntype TGallery = FC<{ imageSource: string }>;\n\nconst Gallery: TGallery = ({ imageSource }) => {\n  return (\n    <div id=\"carousel\">\n      <Carousel id=\"carousel-slides\" controls={false}>\n        <Carousel.Item>\n          <img\n            id=\"album-img\"\n            className=\"d-block w-100\"\n            src={imageSource}\n            alt=\"Monochromized album art\"\n          />\n        </Carousel.Item>\n      </Carousel>\n    </div>\n  );\n};\n\nexport default Gallery;\n","import { FC, useContext } from 'react';\nimport { DataContext } from '../contexts/DataContext';\nimport FormGroup from './Form/FormGroup';\nimport Title from './Title';\nimport Gallery from './Gallery/Gallery';\n\ninterface Properties {\n  imageSource?: string;\n  fields?: string[];\n}\ntype TMonochromize = FC<Properties>;\n\nconst Monochromize: TMonochromize = ({ fields = ['artist', 'album'] }) => {\n  const { data } = useContext(DataContext);\n  return (\n    <div>\n      <Title />\n      <FormGroup fields={fields} />\n      <Gallery imageSource={data.imageSource} />\n    </div>\n  );\n};\n\nexport default Monochromize;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './css/main.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Monochromize from './components/Monochromize';\nimport reportWebVitals from './tests/reportWebVitals';\nimport DataContextProvider from './contexts/DataContext';\n\nfunction App() {\n  return (\n    <React.StrictMode>\n      <Router>\n        <DataContextProvider>\n          <Monochromize />\n        </DataContextProvider>\n      </Router>\n    </React.StrictMode>\n  );\n}\nReactDOM.render(<App />, document.getElementById('root'));\nreportWebVitals();\n"],"sourceRoot":""}